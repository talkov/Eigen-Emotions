import argparse

import cv2 as cv
import numpy as np


def lightened_img(img, mult):
    rows = np.shape(img)[0]
    cols = np.shape(img)[1]
    for row in range(rows):
        for col in range(cols):
            if img[row, col] * mult < 1:
                img[row, col] = img[row, col] * mult * 255
            else:
                img[row, col] = 255
    light_img = img.astype(np.uint8)
    return light_img


def face_detection(frame):
    face_cascade = cv.CascadeClassifier()
    parser = argparse.ArgumentParser(description='Code for Cascade Classifier tutorial.')
    parser.add_argument('--face_cascade', help='Path to face cascade.',
                        default='/Users/omerhazan/Desktop/personal/studies/image '
                                'processing/image_processing_project/face_detection/haarcascade_frontalface_alt.xml')
    args = parser.parse_args()
    face_cascade_name = args.face_cascade
    if not face_cascade.load(cv.samples.findFile(face_cascade_name)):
        print('--(!)Error loading face cascade')
        exit(0)
    # the viola-jones algorithm
    #frame = cv.resize(frame, (360, 200))
    grayscale_image = cv.cvtColor(frame, cv.COLOR_BGR2GRAY)
    grayscale_image = cv.equalizeHist(grayscale_image)
    rescaled_img = grayscale_image / 255
    avg_gray = np.mean(rescaled_img)

    mult = 0.5 / avg_gray
    if avg_gray < 0.1:
        grayscale_image = lightened_img(rescaled_img, mult)
    elif avg_gray < 0.2:
        grayscale_image = lightened_img(rescaled_img, mult)
    elif avg_gray < 0.3:
        grayscale_image = lightened_img(rescaled_img, mult)
    elif avg_gray < 0.4:
        grayscale_image = lightened_img(rescaled_img, mult)
    detected_faces = face_cascade.detectMultiScale(grayscale_image, minNeighbors=8)
    if len(detected_faces) == 0:
        detected_faces = face_cascade.detectMultiScale(grayscale_image, minNeighbors=4)
        if len(detected_faces) == 0:
            detected_faces = face_cascade.detectMultiScale(grayscale_image, minNeighbors=2)
            if len(detected_faces) == 0:
                print('empty')    # print(detected_faces)
    face = None
    all_faces = []
    for (column, row, width, height) in detected_faces:
        # 0cv.rectangle(frame,(column, row),
        #   (column + width, row + height),(0, 0, 0),2 )
        face = grayscale_image[row:row + height, column:column + width]
        face = cv.resize(face, (48, 48))
        all_faces.append(face)
    return all_faces,detected_faces


