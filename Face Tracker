import cv2 as cv
import numpy as np
import pandas
from google.colab import drive
from google.colab.patches import cv2_imshow
drive.mount('/content/drive')
drive_path = '/content/drive/MyDrive/DIP_final_work/' # TODO - UPDATE ME WITH THE TRUE PATH!


def lightened_img(img,mult): #sets the average of the pixels to be 0.5 (to make sure that the light is not extreme)
  rows = np.shape(img)[0]
  cols = np.shape(img)[1]
  for row in range(rows):
    for col in range(cols):
      if img[row,col]*mult<1:
        img[row,col] = img[row,col]*mult*255
      else:
        img[row,col] = 255
  light_img = img.astype(np.uint8)
  return light_img


cap= cv.VideoCapture(drive_path + 'video_2.MOV')
if not cap.isOpened():
    print("Error: Could not open video.")
face_cascade = cv.CascadeClassifier(drive_path + ' haarcascade_frontalface_alt.xml')
while True:
  ret, frame = cap.read() #gets a single frame, ret tells us if it was read correctly
  if not ret:   #breaks out of the loop if the frame wasnt loaded correctly (end of stream)
    print('end of video or an error has occured')
    break
# the viola-jones algorithm
  frame = cv.resize(frame,(360,200))
  grayscale_image = cv.cvtColor(frame, cv.COLOR_BGR2GRAY)
  rescaled_img = grayscale_image/255
  avg_gray = np.mean(rescaled_img)
  mult = 0.5/avg_gray
  grayscale_image = lightened_img(rescaled_img,mult)

  detected_faces = face_cascade.detectMultiScale(grayscale_image,minNeighbors=8)
  if len(detected_faces) == 0:
    detected_faces = face_cascade.detectMultiScale(grayscale_image,minNeighbors=4)
    if len(detected_faces) == 0:
      detected_faces = face_cascade.detectMultiScale(grayscale_image,minNeighbors=2)
      if len(detected_faces) == 0:
        print('empty')
  """gets the rectangles of the detected faces, left upper corner and height
  and width of the rectangle. minNeighbors sets the amount of overlapping rectangles
  """
  #print(detected_faces)
  faces = []
  for (column, row, width, height) in detected_faces:
      #cv.rectangle(frame,(column, row),
       #   (column + width, row + height),(0, 0, 0),2 )
      face = grayscale_image[row:row+height,column:column + width]
      #cuts the rectangle of the detected face
      face = cv.resize(face,(48,48))
      face = cv.equalizeHist(face)
      face_blur = 0.01*cv.GaussianBlur(face, (5, 5), 0)
      face_blur = face_blur.astype(np.uint8)
      face -= face_blur
      faces.append(face)
  
  for face in faces:
    cv2_imshow(face)
    cv.waitKey(0)
    cv.destroyAllWindows()

